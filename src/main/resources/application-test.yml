info:
  app:
    name: '@project.name@'
    description: '@project.description@'
    version: '@project.version@'
    groupId: "@project.groupId@"
    artifactId: "@project.artifactId@"
    java: "@java.version@"

server:
    port: 8080
    servlet:
      context-path: "/@project.artifactId@"

spring:
  banner:
    location: classpath:/banner.txt
  ci:
    ambiente: "TESTE"
    secrets: "test"
  data:
    elasticsearch:
      repositories:
        enabled: true
  elasticsearch:
    rest:
      uris: 'http://localhost:9200'
      connection-timeout: 5000
      read-timeout: 60000
    indices:
      auto-create: true
  datasource:
    url: 'jdbc:mysql://localhost:3306/four_ecom'
    username: user
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: 'org.apache.kafka.common.serialization.StringSerializer'
      value-serializer: 'org.springframework.kafka.support.serializer.JsonSerializer'
    consumer:
      key-deserializer: 'org.apache.kafka.common.serialization.StringDeserializer'
      value-deserializer: 'org.springframework.kafka.support.serializer.JsonDeserializer'
    listener:
      ack-mode: manual

configs:
  kafka:
    group-id: ${info.app.name}
    topics:
      command:
        name: 'four-ecom-core-order-command-json'

logging:
  pattern:
    level: '%5p [${info.app.name:},%X{traceId:-},%X{spanId:-}]'

auth:
  jwt-expiration-ms: '120000'
  jwt-secret: '69df$5314%Cf5e2#4fA9b@b33d*a95e6Sb1da;e0f9c30fF3TEYbf&5aGea!4311^86fa>S49ceJc2I4Pa72SD56'